---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  name: jenkins
  namespace: jenkins
  annotations:
    flux.weave.works/ignore: "false"
    flux.weave.works/automated: "false"

spec:
  releaseName: jenkins
  rollback:
    enable: true
    retry: true
  timeout: 600
  chart:
    repository: https://charts.jenkins.io
    name: jenkins
    version: 3.5.3
  values:
    controller:
      # Used for label app.kubernetes.io/component
      componentName: "jenkins-controller"
      image: "hmctspublic.azurecr.io/jenkins/jenkins"
      tag: "dbfgbf"
      podSecurityContextOverride:
        runAsUser: 0
      imagePullPolicy: "IfNotPresent"
      podLabels:
        aadpodidbinding: jenkins
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                      - jenkins
              topologyKey: "kubernetes.io/hostname"
      resources:
        requests:
          cpu: "2000m"
          memory: "4096Mi"
        limits:
          cpu: "2000m"
          memory: "4096Mi"
      javaOpts: >-
        -XX:InitialRAMPercentage=30.0
        -XX:MaxRAMPercentage=65.0
        -XX:MinRAMPercentage=30.0
        -XX:+UseG1GC
        -XX:+AlwaysPreTouch
        -XX:+HeapDumpOnOutOfMemoryError
        -XX:HeapDumpPath=/var/jenkins_home/logs
        -XX:+UseStringDeduplication
        -XX:+ParallelRefProcEnabled
        -XX:+DisableExplicitGC
        -Xlog:gc*=info,ref*=debug,ergo*=trace,age*=trace:file=/var/jenkins_home/logs/gc.log::filecount=5,filesize=40M
        -Djava.util.logging.config.file=/var/jenkins_home/userconf/logging.properties
        -Djenkins.azure-keyvault.uami.enabled=true
        -Djenkins.ui.refresh=true
        -Djenkins.model.Jenkins.logStartupPerformance=true
        -Dorg.jenkinsci.plugins.durabletask.BourneShellScript.LAUNCH_DIAGNOSTICS=true
        -Dkubernetes.websocket.ping.interval=60000
        -Dorg.apache.commons.jelly.tags.fmt.timeZone=Europe/London
        -Dhudson.model.WorkspaceCleanupThread.retainForDays=2
        -Dhudson.model.DirectoryBrowserSupport.CSP="default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; font-src 'self'; img-src 'self'"

      installPlugins: false
      # Below is the implementation of Jenkins Configuration as Code.  Add a key under configScripts for each configuration area,
      # where each corresponds to a plugin or section of the UI.  Each key (prior to | character) is just a label, and can be any value.
      # Keys are only used to give the section a meaningful name.  The only restriction is they may only contain RFC 1123 \ DNS label
      # characters: lowercase letters, numbers, and hyphens.  The keys become the name of a configuration yaml file on the master in
      # /var/jenkins_home/casc_configs (by default) and will be processed by the Configuration as Code Plugin.  The lines after each |
      # become the content of the configuration yaml file.  The first line after this is a JCasC root element, eg jenkins, credentials,
      # etc.  Best reference is https://<jenkins_url>/configuration-as-code/reference.
      JCasC:
        defaultConfig: false
        configScripts:
          misc-jenkins-settings: |
            jenkins:
              crumbIssuer:
                standard:
                  excludeClientIPFromCrumb: false
              markupFormatter:
                rawHtml:
                  disableSyntaxHighlighting: false
              disabledAdministrativeMonitors:
                - "jenkins.security.QueueItemAuthenticatorMonitor"
                - "jenkins.security.s2m.MasterKillSwitchWarning"
              numExecutors: 0
          default-view: |
            jenkins:
              primaryView:
                all:
                  name: all
          rate-limiting: |
            unclassified:
              gitHubConfiguration:
                apiRateLimitChecker: ThrottleOnOver
          auth: |
            jenkins:
              authorizationStrategy:
                azureAdMatrix:
                  permissions:
                  - "Job/Discover:anonymous"
                  - "Overall/Administer:DTS Platform Operations (e7ea2042-4ced-45dd-8ae3-e051c6551789)"
                  - "Agent/ExtendedRead:DTS SDS Developers (7bde62e7-b39f-487c-95c9-b4c794fdbb96)"
                  - "Job/Build:DTS SDS Developers (7bde62e7-b39f-487c-95c9-b4c794fdbb96)"
                  - "Job/Cancel:DTS SDS Developers (7bde62e7-b39f-487c-95c9-b4c794fdbb96)"
                  - "Job/ExtendedRead:DTS SDS Developers (7bde62e7-b39f-487c-95c9-b4c794fdbb96)"
                  - "Job/Read:DTS SDS Developers (7bde62e7-b39f-487c-95c9-b4c794fdbb96)"
                  - "Job/Workspace:DTS SDS Developers (7bde62e7-b39f-487c-95c9-b4c794fdbb96)"
                  - "Lockable Resources/Unlock:DTS SDS Developers (7bde62e7-b39f-487c-95c9-b4c794fdbb96)"
                  - "Lockable Resources/View:DTS SDS Developers (7bde62e7-b39f-487c-95c9-b4c794fdbb96)"
                  - "Overall/Read:DTS SDS Developers (7bde62e7-b39f-487c-95c9-b4c794fdbb96)"
                  - "Overall/SystemRead:DTS SDS Developers (7bde62e7-b39f-487c-95c9-b4c794fdbb96)"
                  - "Run/Replay:DTS SDS Developers (7bde62e7-b39f-487c-95c9-b4c794fdbb96)"
                  - "Run/Update:DTS SDS Developers (7bde62e7-b39f-487c-95c9-b4c794fdbb96)"
                  - "View/Read:DTS SDS Developers (7bde62e7-b39f-487c-95c9-b4c794fdbb96)"
          global-library: |
            unclassified:
              globalLibraries:
                libraries:
                  - name: 'Infrastructure'
                    includeInChangesets: false
                    defaultVersion: master
                    retriever:
                      modernSCM:
                        scm:
                          github:
                            credentialsId: hmcts-jenkins-cnp
                            repoOwner: hmcts
                            repository: cnp-jenkins-library
                  - name: 'Pipeline'
                    includeInChangesets: false
                    defaultVersion: master
                    retriever:
                      modernSCM:
                        scm:
                          github:
                            credentialsId: hmcts-jenkins-cnp
                            repoOwner: hmcts
                            repository: cnp-jenkins-library
          slack: |
            unclassified:
              slackNotifier:
                teamDomain: hmcts-reform
                tokenCredentialId: slack-token
                botUser: true
          pipeline-config: |
            unclassified:
              globalDefaultFlowDurabilityLevel:
                durabilityHint: PERFORMANCE_OPTIMIZED
          sonar: |
            unclassified:
              sonarGlobalConfiguration:
                installations:
                  - additionalAnalysisProperties: sonar.organization=hmcts
                    name: SonarQube
                    credentialsId: 'sonarcloud-api-token'
                    serverUrl: 'https://sonarcloud.io'
          timestamper: |
            unclassified:
              timestamper:
                allPipelines: true
          theme: |
            unclassified:
              themeManager:
                theme: "darkSystem"
          build-discarders: |
            unclassified:
              buildDiscarders:
                configuredBuildDiscarders:
                - "jobBuildDiscarder"
                - simpleBuildDiscarder:
                    discarder:
                      logRotator:
                        artifactDaysToKeepStr: "14"
                        artifactNumToKeepStr: "20"
                        daysToKeepStr: "14"
                        numToKeepStr: "20"
          credentials: |
            credentials:
              system:
                domainCredentials:
                  - credentials:
                      - string:
                          scope: GLOBAL
                          id: sonarcloud-api-token
                          secret: '${sonarcloud-api-token}'
                          description: SonarCloud API token
                      - string:
                          scope: GLOBAL
                          id: slack-token
                          secret: '${slack-token}'
                          description: Slack token
                      - usernamePassword:
                          description: "SSH credentials for Jenkins agents"
                          id: "vm_agent_creds"
                          password: "${jenkins-agent-password}"
                          scope: GLOBAL
                          username: "jenkinsssh"
                      - string:
                          description: "Read/Write Key To Publish CosmosDB Metrics"
                          id: "COSMOSDB_TOKEN_KEY"
                          scope: GLOBAL
                          secret: "${cosmosdb-token-key}"
                      - usernamePassword:
                          description: "Username and password for the OWASP vulnerability database"
                          id: "owasp-db-login"
                          password: "${OWASPDb-Password}"
                          scope: GLOBAL
                          username: "owasp_administrator"
                      - sauce:
                          apiKey: "${sauce-access-key}"
                          description: "Sauce Labs Reform Key"
                          id: "reform_tunnel"
                          scope: GLOBAL
                          username: "reform"
                          restEndpoint: "https://eu-central-1.saucelabs.com/"
                      - azureImds:
                          azureEnvName: "Azure"
                          subscriptionId: "${subscription-id}"
                          description: "Jenkins Azure identity"
                          id: "jenkins-managed-identity"
                          scope: GLOBAL
                      - gitHubApp:
                          appID: "52960"
                          description: "GitHub APP Key - CNP"
                          id: "hmcts-jenkins-cnp"
                          privateKey: "${hmcts-jenkins-cnp-ghapp}"
          jobs: |
            jobs:
              - url: https://raw.githubusercontent.com/hmcts/sds-jenkins-config/master/jobdsl/organisations.groovy

      sidecars:
        configAutoReload:
          image: kiwigrid/k8s-sidecar:0.1.275
          # If enabled: true, Jenkins Configuration as Code will be reloaded on-the-fly without a reboot.  If false or not-specified,
          # jcasc changes will cause a reboot and will only be applied at the subsequent start-up.  Auto-reload uses the Jenkins CLI
          # over SSH to reapply config when changes to the configScripts are detected.  The admin user (or account you specify in
          # master.adminUser) will have a random SSH private key (RSA 4096) assigned unless you specify adminSshKey.  This will be saved to a k8s secret.
          resources:
            limits:
              cpu: 100m
              memory: 100Mi
            requests:
              cpu: 50m
              memory: 50Mi
          env:
            - name: REQ_TIMEOUT
              value: "60"
            - name: METHOD
              value: "SLEEP"
            - name: SLEEP_TIME
              value: "300"
      ingress:
        enabled: true
        labels: {}
        annotations:
          kubernetes.io/ingress.class: traefik
          traefik.ingress.kubernetes.io/router.tls: "true"
    agent:
      enabled: false

    persistence:
      enabled: true
      ## A manually managed Persistent Volume and Claim
      ## Requires persistence.enabled: true
      ## If defined, PVC must be created manually before volume will be bound
      existingClaim: "jenkins"
      ## jenkins data Persistent Volume Storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      ##
      storageClass:
      annotations: {}
      accessMode: "ReadWriteOnce"
      size: "8Gi"
      volumes:
        - name: workspace
          hostPath:
            path: /mnt
            type: DirectoryOrCreate
        - name: logging
          configMap:
            name: jenkins-config-logging
      mounts:
        - mountPath: /var/jenkins_home/workspace
          name: workspace
        - mountPath: /var/jenkins_home/userconf
          name: logging


    ## Install Default RBAC roles and bindings
    rbac:
      create: true
