name: Netbox
run-name: Netbox
permissions:
  id-token: write
  contents: read
  actions: read
on:
  push:
    branches:
      - "master"
    paths:
      - apps/netbox/netbox/ptlsbox/netbox.yaml
      - DeleteAfterTesting
  workflow_dispatch:
jobs:
  netbox:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'
      - name: Set up kubelogin for non-interactive login
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.24'
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ae4401e2-f8e6-4bbd-9ced-f42c4dfaea70 
          tenant-id: 531ff96d-0ae9-462a-8d2d-bec7c0b42082 
          allow-no-subscriptions: true
      - uses: azure/aks-set-context@v4
        name: Get Aks context
        with:
          resource-group: 'ss-ptlsbox-00-rg'
          cluster-name: 'ss-ptlsbox-00-aks'
          subscription: DTS-SHAREDSERVICESPTL-SBOX
          admin: true
      - name: install testkube
        run: wget -qO - https://repo.testkube.io/key.pub | sudo apt-key add - && echo "deb https://repo.testkube.io/linux linux main" | sudo tee -a /etc/apt/sources.list && sudo apt-get update && sudo apt-get install -y testkube
      - name: delete netbox test resource
        run: |
              #!/usr/bin/env bash
              if [[ $(testkube get test curl-test --no-execution) ]]; then
                testkube delete test curl-test
              fi
      - name: Create a test resource for netbox
        run: testkube create test --file pipeline-testkube/testkube-netbox.json --name netbox --type "curl/test"
      - name: Run test
        run: testkube run test netbox
      - name: sleep
        run:  sleep 10
      - name: Get status
        run: echo "status=$(testkube get execution --test netbox  -o json --limit 1 | jq -r '.results[].status')" >> $GITHUB_ENV
      - name: delete netbox test resource
        run: testkube delete test netbox

      - run: echo  $GITHUB_SHA
      
      - name: Set env
        run: echo "GH_SHA=$(echo $GITHUB_SHA)" >> $GITHUB_ENV
        
      - run: echo   ${{ env.GH_SHA }}
      
      - name: get PR details 
        uses: octokit/request-action@v2.x
        id: get_pr_number
        with:
          route: GET /repos/hmcts/sds-flux-config/commits/${{ env.GH_SHA }}/pulls
          owner: octokit
          repo: request-action
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Install jq tool
        run: |
          sudo apt-get update
          sudo apt-get install jq
          
      - name: Set env variable PR_TITLE
        run: | 
            echo PR_TITLE=$(echo '${{ steps.get_pr_number.outputs.data }}' | jq -r '.[].title' ) >>   $GITHUB_ENV
      - run: echo PR_TITLE ${{ env.PR_TITLE }} 
      
      - name: Set env 
        run: | 
            echo PR_NUM=$(echo '${{ steps.get_pr_number.outputs.data }}' | jq -r '.[].number' ) >>   $GITHUB_ENV
      - run: echo PR_NUM ${{ env.PR_NUM }}
      
      - name: label open PRs
        if: contains(env.status, 'passed')
        run: |
          #!/usr/bin/env bash
            for pr in $(gh search prs --match title --repo hmcts/sds-flux-config --state open --json number,title --jq  '.[] | select(.title | contains("${{ env.PR_TITLE }}"))| .number')
            do
              gh pr edit $pr --add-label "ApplicationTestPassed" --repo hmcts/sds-flux-config
              echo "updated PR $pr with the label"
            done 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Slack Notification
        if: contains(env.status, 'passed') 
        uses: rtCamp/action-slack-notify@v2
        env:
            SLACK_CHANNEL: slack_msg_format_testing
            SLACK_COLOR: ${{ job.status }}
            SLACK_ICON: ':smiley:'
            SLACK_MESSAGE: '${{ env.PR_TITLE }}'
            SLACK_TITLE: upgrade was successful
            SLACK_USERNAME: netbox
            SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}      
          
      - name: Slack Notification
        if: "!contains(env.status, 'passed')"
        uses: rtCamp/action-slack-notify@v2
        env:
            SLACK_CHANNEL: slack_msg_format_testing
            SLACK_COLOR: ${{ job.status }} 
            SLACK_ICON: ':sign-warning:'
            SLACK_MESSAGE: '${{ env.PR_TITLE }}'
            SLACK_TITLE: upgrade was Unsuccessful
            SLACK_USERNAME: netbox
            SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}       
          
      - name: revert PR
        if: "!contains(env.status, 'passed')"
        run: |
              
               git config --global user.email "<>"
               git config --global user.name "GitHub Actions Bot"
               git pull
               git revert -m 1 ${{ env.GH_SHA }} --no-edit
               git checkout -b revert-commit-${{ env.PR_NUM }} 
               git push --set-upstream origin revert-commit-${{ env.PR_NUM }}
               gh pr create -f -t "Revert PR#${{ env.PR_NUM }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}